// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_comm_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommClient is the client API for Comm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommClient interface {
	FunTest(ctx context.Context, in *RequestTest, opts ...grpc.CallOption) (*ResponseTest, error)
	UnirseJuegoCalamar(ctx context.Context, in *RequestUnirse, opts ...grpc.CallOption) (*ResponseUnirse, error)
	InicioEtapa(ctx context.Context, in *RequestEtapa, opts ...grpc.CallOption) (*ResponseEtapa, error)
	InicioRonda(ctx context.Context, in *RequestRonda, opts ...grpc.CallOption) (*ReponseRonda, error)
	JugadaPrimeraEtapa(ctx context.Context, in *RequestPrimeraEtapa, opts ...grpc.CallOption) (*ResponsePrimeraEtapa, error)
	JugadaSegundaEtapa(ctx context.Context, in *RequestSegundaEtapa, opts ...grpc.CallOption) (*ResponseSegundaEtapa, error)
	JugadaTerceraEtapa(ctx context.Context, in *RequestTerceraEtapa, opts ...grpc.CallOption) (*ResponseTerceraEtapa, error)
	RegistrarJugadaJugador(ctx context.Context, in *RequestRJJ, opts ...grpc.CallOption) (*ResponseRJJ, error)
	RegistrarJugadaDN(ctx context.Context, in *RequestRJDN, opts ...grpc.CallOption) (*ResponseRJDN, error)
	BuscarJugada(ctx context.Context, in *RequestBJ, opts ...grpc.CallOption) (Comm_BuscarJugadaClient, error)
	ObtenerJugada(ctx context.Context, in *RequestOJ, opts ...grpc.CallOption) (Comm_ObtenerJugadaClient, error)
	SolicitarMonto(ctx context.Context, in *RequestMonto, opts ...grpc.CallOption) (*ResponseMonto, error)
}

type commClient struct {
	cc grpc.ClientConnInterface
}

func NewCommClient(cc grpc.ClientConnInterface) CommClient {
	return &commClient{cc}
}

func (c *commClient) FunTest(ctx context.Context, in *RequestTest, opts ...grpc.CallOption) (*ResponseTest, error) {
	out := new(ResponseTest)
	err := c.cc.Invoke(ctx, "/comm.Comm/FunTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) UnirseJuegoCalamar(ctx context.Context, in *RequestUnirse, opts ...grpc.CallOption) (*ResponseUnirse, error) {
	out := new(ResponseUnirse)
	err := c.cc.Invoke(ctx, "/comm.Comm/UnirseJuegoCalamar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) InicioEtapa(ctx context.Context, in *RequestEtapa, opts ...grpc.CallOption) (*ResponseEtapa, error) {
	out := new(ResponseEtapa)
	err := c.cc.Invoke(ctx, "/comm.Comm/InicioEtapa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) InicioRonda(ctx context.Context, in *RequestRonda, opts ...grpc.CallOption) (*ReponseRonda, error) {
	out := new(ReponseRonda)
	err := c.cc.Invoke(ctx, "/comm.Comm/InicioRonda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) JugadaPrimeraEtapa(ctx context.Context, in *RequestPrimeraEtapa, opts ...grpc.CallOption) (*ResponsePrimeraEtapa, error) {
	out := new(ResponsePrimeraEtapa)
	err := c.cc.Invoke(ctx, "/comm.Comm/JugadaPrimeraEtapa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) JugadaSegundaEtapa(ctx context.Context, in *RequestSegundaEtapa, opts ...grpc.CallOption) (*ResponseSegundaEtapa, error) {
	out := new(ResponseSegundaEtapa)
	err := c.cc.Invoke(ctx, "/comm.Comm/JugadaSegundaEtapa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) JugadaTerceraEtapa(ctx context.Context, in *RequestTerceraEtapa, opts ...grpc.CallOption) (*ResponseTerceraEtapa, error) {
	out := new(ResponseTerceraEtapa)
	err := c.cc.Invoke(ctx, "/comm.Comm/JugadaTerceraEtapa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) RegistrarJugadaJugador(ctx context.Context, in *RequestRJJ, opts ...grpc.CallOption) (*ResponseRJJ, error) {
	out := new(ResponseRJJ)
	err := c.cc.Invoke(ctx, "/comm.Comm/RegistrarJugadaJugador", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) RegistrarJugadaDN(ctx context.Context, in *RequestRJDN, opts ...grpc.CallOption) (*ResponseRJDN, error) {
	out := new(ResponseRJDN)
	err := c.cc.Invoke(ctx, "/comm.Comm/RegistrarJugadaDN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commClient) BuscarJugada(ctx context.Context, in *RequestBJ, opts ...grpc.CallOption) (Comm_BuscarJugadaClient, error) {
	stream, err := c.cc.NewStream(ctx, &Comm_ServiceDesc.Streams[0], "/comm.Comm/BuscarJugada", opts...)
	if err != nil {
		return nil, err
	}
	x := &commBuscarJugadaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Comm_BuscarJugadaClient interface {
	Recv() (*ResponseBJ, error)
	grpc.ClientStream
}

type commBuscarJugadaClient struct {
	grpc.ClientStream
}

func (x *commBuscarJugadaClient) Recv() (*ResponseBJ, error) {
	m := new(ResponseBJ)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commClient) ObtenerJugada(ctx context.Context, in *RequestOJ, opts ...grpc.CallOption) (Comm_ObtenerJugadaClient, error) {
	stream, err := c.cc.NewStream(ctx, &Comm_ServiceDesc.Streams[1], "/comm.Comm/ObtenerJugada", opts...)
	if err != nil {
		return nil, err
	}
	x := &commObtenerJugadaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Comm_ObtenerJugadaClient interface {
	Recv() (*ResponseOJ, error)
	grpc.ClientStream
}

type commObtenerJugadaClient struct {
	grpc.ClientStream
}

func (x *commObtenerJugadaClient) Recv() (*ResponseOJ, error) {
	m := new(ResponseOJ)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commClient) SolicitarMonto(ctx context.Context, in *RequestMonto, opts ...grpc.CallOption) (*ResponseMonto, error) {
	out := new(ResponseMonto)
	err := c.cc.Invoke(ctx, "/comm.Comm/SolicitarMonto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommServer is the server API for Comm service.
// All implementations must embed UnimplementedCommServer
// for forward compatibility
type CommServer interface {
	FunTest(context.Context, *RequestTest) (*ResponseTest, error)
	UnirseJuegoCalamar(context.Context, *RequestUnirse) (*ResponseUnirse, error)
	InicioEtapa(context.Context, *RequestEtapa) (*ResponseEtapa, error)
	InicioRonda(context.Context, *RequestRonda) (*ReponseRonda, error)
	JugadaPrimeraEtapa(context.Context, *RequestPrimeraEtapa) (*ResponsePrimeraEtapa, error)
	JugadaSegundaEtapa(context.Context, *RequestSegundaEtapa) (*ResponseSegundaEtapa, error)
	JugadaTerceraEtapa(context.Context, *RequestTerceraEtapa) (*ResponseTerceraEtapa, error)
	RegistrarJugadaJugador(context.Context, *RequestRJJ) (*ResponseRJJ, error)
	RegistrarJugadaDN(context.Context, *RequestRJDN) (*ResponseRJDN, error)
	BuscarJugada(*RequestBJ, Comm_BuscarJugadaServer) error
	ObtenerJugada(*RequestOJ, Comm_ObtenerJugadaServer) error
	SolicitarMonto(context.Context, *RequestMonto) (*ResponseMonto, error)
	mustEmbedUnimplementedCommServer()
}

// UnimplementedCommServer must be embedded to have forward compatible implementations.
type UnimplementedCommServer struct {
}

func (UnimplementedCommServer) FunTest(context.Context, *RequestTest) (*ResponseTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunTest not implemented")
}
func (UnimplementedCommServer) UnirseJuegoCalamar(context.Context, *RequestUnirse) (*ResponseUnirse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnirseJuegoCalamar not implemented")
}
func (UnimplementedCommServer) InicioEtapa(context.Context, *RequestEtapa) (*ResponseEtapa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InicioEtapa not implemented")
}
func (UnimplementedCommServer) InicioRonda(context.Context, *RequestRonda) (*ReponseRonda, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InicioRonda not implemented")
}
func (UnimplementedCommServer) JugadaPrimeraEtapa(context.Context, *RequestPrimeraEtapa) (*ResponsePrimeraEtapa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JugadaPrimeraEtapa not implemented")
}
func (UnimplementedCommServer) JugadaSegundaEtapa(context.Context, *RequestSegundaEtapa) (*ResponseSegundaEtapa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JugadaSegundaEtapa not implemented")
}
func (UnimplementedCommServer) JugadaTerceraEtapa(context.Context, *RequestTerceraEtapa) (*ResponseTerceraEtapa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JugadaTerceraEtapa not implemented")
}
func (UnimplementedCommServer) RegistrarJugadaJugador(context.Context, *RequestRJJ) (*ResponseRJJ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarJugadaJugador not implemented")
}
func (UnimplementedCommServer) RegistrarJugadaDN(context.Context, *RequestRJDN) (*ResponseRJDN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarJugadaDN not implemented")
}
func (UnimplementedCommServer) BuscarJugada(*RequestBJ, Comm_BuscarJugadaServer) error {
	return status.Errorf(codes.Unimplemented, "method BuscarJugada not implemented")
}
func (UnimplementedCommServer) ObtenerJugada(*RequestOJ, Comm_ObtenerJugadaServer) error {
	return status.Errorf(codes.Unimplemented, "method ObtenerJugada not implemented")
}
func (UnimplementedCommServer) SolicitarMonto(context.Context, *RequestMonto) (*ResponseMonto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarMonto not implemented")
}
func (UnimplementedCommServer) mustEmbedUnimplementedCommServer() {}

// UnsafeCommServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommServer will
// result in compilation errors.
type UnsafeCommServer interface {
	mustEmbedUnimplementedCommServer()
}

func RegisterCommServer(s grpc.ServiceRegistrar, srv CommServer) {
	s.RegisterService(&Comm_ServiceDesc, srv)
}

func _Comm_FunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).FunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/FunTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).FunTest(ctx, req.(*RequestTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_UnirseJuegoCalamar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnirse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).UnirseJuegoCalamar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/UnirseJuegoCalamar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).UnirseJuegoCalamar(ctx, req.(*RequestUnirse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_InicioEtapa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEtapa)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).InicioEtapa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/InicioEtapa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).InicioEtapa(ctx, req.(*RequestEtapa))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_InicioRonda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRonda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).InicioRonda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/InicioRonda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).InicioRonda(ctx, req.(*RequestRonda))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_JugadaPrimeraEtapa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPrimeraEtapa)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).JugadaPrimeraEtapa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/JugadaPrimeraEtapa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).JugadaPrimeraEtapa(ctx, req.(*RequestPrimeraEtapa))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_JugadaSegundaEtapa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSegundaEtapa)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).JugadaSegundaEtapa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/JugadaSegundaEtapa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).JugadaSegundaEtapa(ctx, req.(*RequestSegundaEtapa))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_JugadaTerceraEtapa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTerceraEtapa)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).JugadaTerceraEtapa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/JugadaTerceraEtapa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).JugadaTerceraEtapa(ctx, req.(*RequestTerceraEtapa))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_RegistrarJugadaJugador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRJJ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).RegistrarJugadaJugador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/RegistrarJugadaJugador",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).RegistrarJugadaJugador(ctx, req.(*RequestRJJ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_RegistrarJugadaDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRJDN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).RegistrarJugadaDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/RegistrarJugadaDN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).RegistrarJugadaDN(ctx, req.(*RequestRJDN))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comm_BuscarJugada_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestBJ)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommServer).BuscarJugada(m, &commBuscarJugadaServer{stream})
}

type Comm_BuscarJugadaServer interface {
	Send(*ResponseBJ) error
	grpc.ServerStream
}

type commBuscarJugadaServer struct {
	grpc.ServerStream
}

func (x *commBuscarJugadaServer) Send(m *ResponseBJ) error {
	return x.ServerStream.SendMsg(m)
}

func _Comm_ObtenerJugada_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestOJ)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommServer).ObtenerJugada(m, &commObtenerJugadaServer{stream})
}

type Comm_ObtenerJugadaServer interface {
	Send(*ResponseOJ) error
	grpc.ServerStream
}

type commObtenerJugadaServer struct {
	grpc.ServerStream
}

func (x *commObtenerJugadaServer) Send(m *ResponseOJ) error {
	return x.ServerStream.SendMsg(m)
}

func _Comm_SolicitarMonto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMonto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).SolicitarMonto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm.Comm/SolicitarMonto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).SolicitarMonto(ctx, req.(*RequestMonto))
	}
	return interceptor(ctx, in, info, handler)
}

// Comm_ServiceDesc is the grpc.ServiceDesc for Comm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Comm",
	HandlerType: (*CommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FunTest",
			Handler:    _Comm_FunTest_Handler,
		},
		{
			MethodName: "UnirseJuegoCalamar",
			Handler:    _Comm_UnirseJuegoCalamar_Handler,
		},
		{
			MethodName: "InicioEtapa",
			Handler:    _Comm_InicioEtapa_Handler,
		},
		{
			MethodName: "InicioRonda",
			Handler:    _Comm_InicioRonda_Handler,
		},
		{
			MethodName: "JugadaPrimeraEtapa",
			Handler:    _Comm_JugadaPrimeraEtapa_Handler,
		},
		{
			MethodName: "JugadaSegundaEtapa",
			Handler:    _Comm_JugadaSegundaEtapa_Handler,
		},
		{
			MethodName: "JugadaTerceraEtapa",
			Handler:    _Comm_JugadaTerceraEtapa_Handler,
		},
		{
			MethodName: "RegistrarJugadaJugador",
			Handler:    _Comm_RegistrarJugadaJugador_Handler,
		},
		{
			MethodName: "RegistrarJugadaDN",
			Handler:    _Comm_RegistrarJugadaDN_Handler,
		},
		{
			MethodName: "SolicitarMonto",
			Handler:    _Comm_SolicitarMonto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuscarJugada",
			Handler:       _Comm_BuscarJugada_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObtenerJugada",
			Handler:       _Comm_ObtenerJugada_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comm/comm.proto",
}
